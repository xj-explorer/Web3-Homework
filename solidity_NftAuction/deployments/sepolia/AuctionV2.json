{
  "address": "0xe7937FeB141c01F438c0Cc7CD24009Aa3773e0C6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "AuctionUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currentWinner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "enum Auction.AuctionStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethUsdPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "factoryInitializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "factoryUpgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ethUsdPriceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextAuctionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBidIncrementPercentage",
          "type": "uint256"
        }
      ],
      "name": "setMinBidIncrementPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "setTokenPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenUsdPriceFeeds",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x33dcc4f2e40c008d7ac54bb78bcd32c5fa4eeec38e35cb7a8ebe44f1323d30cd",
  "receipt": {
    "to": null,
    "from": "0x74B5057e77D4F58CcC70bF1c7dc9f8405BCc72f0",
    "contractAddress": "0xe7937FeB141c01F438c0Cc7CD24009Aa3773e0C6",
    "transactionIndex": 103,
    "gasUsed": "3801703",
    "logsBloom": "0x
    "blockHash": "0xcd50d43de66980d8355232261cc3fdf8dc37cccf54826cab51d812f44cf09336",
    "transactionHash": "0x33dcc4f2e40c008d7ac54bb78bcd32c5fa4eeec38e35cb7a8ebe44f1323d30cd",
    "logs": [],
    "blockNumber": 9033687,
    "cumulativeGasUsed": "12843030",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5bc55044b0d83067caca8769d0782476",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"AuctionUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentWinner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"enum Auction.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUsdPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"factoryInitializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"factoryUpgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethUsdPriceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint256\"}],\"name\":\"setMinBidIncrementPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"setTokenPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenUsdPriceFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionV2.sol\":\"AuctionV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\\n\\npragma solidity >=0.4.11;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/Auction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract Auction is Initializable, UUPSUpgradeable, OwnableUpgradeable {\\n\\n    // \\u62cd\\u5356\\u72b6\\u6001\\n    enum AuctionStatus {\\n        Active,\\n        Ended,\\n        Cancelled\\n    }\\n\\n    // \\u62cd\\u5356\\u7ed3\\u6784\\u4f53\\n    struct AuctionInfo {\\n        address seller;\\n        address nftContract;\\n        uint256 nftId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 startingPrice;\\n        uint256 currentPrice;\\n        address currentWinner;\\n        address paymentToken;\\n        AuctionStatus status;\\n    }\\n\\n    // \\u62cd\\u5356ID\\u5230\\u62cd\\u5356\\u4fe1\\u606f\\u7684\\u6620\\u5c04\\n    mapping(uint256 => AuctionInfo) public auctions;\\n    uint256 public nextAuctionId;\\n\\naddress public factory;\\n\\n// Chainlink\\u4ef7\\u683c\\u9884\\u8a00\\u673a\\nAggregatorV3Interface public ethUsdPriceFeed;\\n    mapping(address => AggregatorV3Interface) public tokenUsdPriceFeeds;\\n\\n    // \\u624b\\u7eed\\u8d39\\u53c2\\u6570\\n    uint256 public baseFeePercentage;\\n    uint256 public maxFeePercentage;\\n    uint256 public feeThreshold;\\n\\n    // \\u4e8b\\u4ef6\\n    event AuctionCreated(uint256 indexed auctionId, address indexed seller, address indexed nftContract, uint256 nftId);\\n    event BidPlaced(uint256 indexed auctionId, address indexed bidder, uint256 amount);\\n    event AuctionEnded(uint256 indexed auctionId, address indexed winner, uint256 amount);\\n    event AuctionCancelled(uint256 indexed auctionId);\\n    event AuctionUpgraded(address indexed newImplementation);\\n\\n    function initialize(\\n    address _ethUsdPriceFeed,\\n    uint256 _baseFeePercentage,\\n    uint256 _maxFeePercentage,\\n    uint256 _feeThreshold,\\n    address initialOwner,\\n    address _factory\\n) public initializer virtual returns (uint256) {\\n    __Ownable_init(initialOwner);\\n    ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);\\n    baseFeePercentage = _baseFeePercentage;\\n    maxFeePercentage = _maxFeePercentage;\\n    feeThreshold = _feeThreshold;\\n    nextAuctionId = 0;\\n    factory = _factory;\\n    return baseFeePercentage;\\n}\\n\\n    // \\u8bbe\\u7f6e\\u4ef7\\u683c\\u9884\\u8a00\\u673a\\n    function setTokenPriceFeed(address token, address priceFeed) external onlyOwner {\\n        tokenUsdPriceFeeds[token] = AggregatorV3Interface(priceFeed);\\n    }\\n\\n    // \\u521b\\u5efa\\u62cd\\u5356\\n    function createAuction(\\n        address nftContract,\\n        uint256 nftId,\\n        uint256 startingPrice,\\n        uint256 duration,\\n        address paymentToken\\n    ) external {\\n        require(IERC721(nftContract).ownerOf(nftId) == msg.sender, \\\"Not owner of NFT\\\");\\n        require(startingPrice > 0, \\\"Starting price must be greater than 0\\\");\\n        require(duration > 0, \\\"Duration must be greater than 0\\\");\\n\\n        // \\u786e\\u4fddNFT\\u5df2\\u88ab\\u6279\\u51c6\\u8f6c\\u8ba9\\n        require(IERC721(nftContract).isApprovedForAll(msg.sender, address(this)) ||\\n                IERC721(nftContract).getApproved(nftId) == address(this), \\\"NFT not approved\\\");\\n\\n        uint256 auctionId = nextAuctionId++;\\n        uint256 startTime = block.timestamp;\\n        uint256 endTime = startTime + duration;\\n\\n        auctions[auctionId] = AuctionInfo({\\n            seller: msg.sender,\\n            nftContract: nftContract,\\n            nftId: nftId,\\n            startTime: startTime,\\n            endTime: endTime,\\n            startingPrice: startingPrice,\\n            currentPrice: startingPrice,\\n            currentWinner: address(0),\\n            paymentToken: paymentToken,\\n            status: AuctionStatus.Active\\n        });\\n\\n        emit AuctionCreated(auctionId, msg.sender, nftContract, nftId);\\n    }\\n\\n    // \\u51fa\\u4ef7\\n    function placeBid(uint256 auctionId) external payable virtual {\\n        AuctionInfo storage auction = auctions[auctionId];\\n        require(auction.status == AuctionStatus.Active, \\\"Auction not active\\\");\\n        require(block.timestamp < auction.endTime, \\\"Auction ended\\\");\\n\\n        uint256 bidAmount;\\n        if (auction.paymentToken == address(0)) {\\n            // ETH\\u51fa\\u4ef7\\n            bidAmount = msg.value;\\n            require(bidAmount > auction.currentPrice, \\\"Bid amount too low\\\");\\n        } else {\\n            // ERC20\\u4ee3\\u5e01\\u51fa\\u4ef7\\n            require(msg.value == 0, \\\"Cannot send ETH for ERC20 auction\\\");\\n            bidAmount = IERC20(auction.paymentToken).allowance(msg.sender, address(this));\\n            require(bidAmount > auction.currentPrice, \\\"Bid amount too low\\\");\\n\\n            // \\u8f6c\\u79fb\\u4ee3\\u5e01\\n            IERC20(auction.paymentToken).transferFrom(msg.sender, address(this), bidAmount);\\n        }\\n\\n        // \\u9000\\u8fd8\\u4e4b\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\u7684\\u8d44\\u91d1\\n        if (auction.currentWinner != address(0)) {\\n            if (auction.paymentToken == address(0)) {\\n                payable(auction.currentWinner).transfer(auction.currentPrice);\\n            } else {\\n                IERC20(auction.paymentToken).transfer(auction.currentWinner, auction.currentPrice);\\n            }\\n        }\\n\\n        // \\u66f4\\u65b0\\u62cd\\u5356\\u4fe1\\u606f\\n        auction.currentPrice = bidAmount;\\n        auction.currentWinner = msg.sender;\\n\\n        emit BidPlaced(auctionId, msg.sender, bidAmount);\\n    }\\n\\n    // \\u7ed3\\u675f\\u62cd\\u5356\\n    function endAuction(uint256 auctionId) external {\\n        AuctionInfo storage auction = auctions[auctionId];\\n        require(auction.status == AuctionStatus.Active, \\\"Auction not active\\\");\\n        require(block.timestamp >= auction.endTime, \\\"Auction not ended yet\\\");\\n\\n        auction.status = AuctionStatus.Ended;\\n\\n        if (auction.currentWinner != address(0)) {\\n            // \\u8ba1\\u7b97\\u624b\\u7eed\\u8d39\\n            uint256 fee = calculateFee(auction.currentPrice);\\n            uint256 sellerAmount = auction.currentPrice - fee;\\n\\n            // \\u8f6c\\u79fbNFT\\u7ed9\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\n            IERC721(auction.nftContract).safeTransferFrom(auction.seller, auction.currentWinner, auction.nftId);\\n\\n            // \\u8f6c\\u79fb\\u8d44\\u91d1\\u7ed9\\u5356\\u5bb6\\n            if (auction.paymentToken == address(0)) {\\n                payable(auction.seller).transfer(sellerAmount);\\n            } else {\\n                IERC20(auction.paymentToken).transfer(auction.seller, sellerAmount);\\n            }\\n\\n            emit AuctionEnded(auctionId, auction.currentWinner, auction.currentPrice);\\n        } else {\\n            // \\u6ca1\\u6709\\u51fa\\u4ef7\\uff0c\\u62cd\\u5356\\u7ed3\\u675f\\u4f46NFT\\u672a\\u552e\\u51fa\\n            emit AuctionEnded(auctionId, address(0), 0);\\n        }\\n    }\\n\\n    // \\u53d6\\u6d88\\u62cd\\u5356\\n    function cancelAuction(uint256 auctionId) external {\\n        AuctionInfo storage auction = auctions[auctionId];\\n        require(auction.seller == msg.sender, \\\"Only seller can cancel\\\");\\n        require(auction.status == AuctionStatus.Active, \\\"Auction not active\\\");\\n        require(auction.currentWinner == address(0), \\\"Cannot cancel after bids\\\");\\n\\n        auction.status = AuctionStatus.Cancelled;\\n\\n        emit AuctionCancelled(auctionId);\\n    }\\n\\n    // \\u8ba1\\u7b97\\u52a8\\u6001\\u624b\\u7eed\\u8d39\\n    function calculateFee(uint256 amount) public view returns (uint256) {\\n        if (amount <= feeThreshold) {\\n            return (amount * baseFeePercentage) / 10000;\\n        } else {\\n            uint256 excess = amount - feeThreshold;\\n            uint256 excessFee = (excess * maxFeePercentage) / 10000;\\n            uint256 baseFee = (feeThreshold * baseFeePercentage) / 10000;\\n            return baseFee + excessFee;\\n        }\\n    }\\n\\n    // \\u83b7\\u53d6\\u4ef7\\u683c\\uff08\\u7f8e\\u5143\\uff09\\n    function getPriceInUSD(address token, uint256 amount) public view returns (uint256) {\\n        if (token == address(0)) {\\n            // ETH\\u4ef7\\u683c\\n            (, int256 price, , , ) = ethUsdPriceFeed.latestRoundData();\\n            return (amount * uint256(price)) / (10 ** 8); // \\u5047\\u8bbe\\u4ef7\\u683cFeed\\u67098\\u4f4d\\u5c0f\\u6570\\n        } else {\\n            // ERC20\\u4ee3\\u5e01\\u4ef7\\u683c\\n            AggregatorV3Interface priceFeed = tokenUsdPriceFeeds[token];\\n            require(address(priceFeed) != address(0), \\\"No price feed for token\\\");\\n            (, int256 price, , , ) = priceFeed.latestRoundData();\\n            return (amount * uint256(price)) / (10 ** 8); // \\u5047\\u8bbe\\u4ef7\\u683cFeed\\u67098\\u4f4d\\u5c0f\\u6570\\n        }\\n    }\\n\\n    // \\u9632\\u6b62\\u5408\\u7ea6\\u88ab\\u9500\\u6bc1\\n    receive() external payable {}\\n\\n    // \\u5b9e\\u73b0UUPS\\u5347\\u7ea7\\u6240\\u9700\\u7684\\u51fd\\u6570\\n    function _authorizeUpgrade(address newImplementation) internal override {\\n        // \\u5141\\u8bb8\\u4ee3\\u7406\\u5408\\u7ea6\\u3001\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u6216\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\u5347\\u7ea7\\u51fd\\u6570\\n        require(\\n            _msgSender() == address(this) || _msgSender() == owner() || _msgSender() == factory,\\n            \\\"UUPSUnauthorizedCallContext\\\"\\n        );\\n    }\\n\\n    // \\u5347\\u7ea7\\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u4ee3\\u7406\\u5408\\u7ea6\\u8c03\\u7528\\n    function upgradeTo(address newImplementation) external onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        super.upgradeToAndCall(newImplementation, bytes(''));\\n        emit AuctionUpgraded(newImplementation);\\n    }\\n\\n    // \\u5de5\\u5382\\u5347\\u7ea7\\u51fd\\u6570\\uff0c\\u5141\\u8bb8\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\n    function factoryUpgradeTo(address newImplementation) external {\\n        require(msg.sender == factory, \\\"Only factory can call this function\\\");\\n        require(newImplementation != address(0), \\\"New implementation cannot be zero address\\\");\\n        \\n        _authorizeUpgrade(newImplementation);\\n        // \\u76f4\\u63a5\\u66f4\\u65b0\\u5b9e\\u73b0\\u5730\\u5740\\n        assembly {\\n            sstore(_IMPLEMENTATION_SLOT, newImplementation)\\n        }\\n        emit AuctionUpgraded(newImplementation);\\n    }\\n\\n    // UUPS\\u4ee3\\u7406\\u5b9e\\u73b0\\u69fd\\u4f4d\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n\\n}\",\"keccak256\":\"0x5d1076683dc029c2e6f67c4cd2d50f7796b5fcf7292ed9cf2a75bbde4b782fb6\",\"license\":\"MIT\"},\"contracts/AuctionV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Auction.sol\\\";\\n\\ncontract AuctionV2 is Auction {\\n    // \\u65b0\\u589e\\u7248\\u672c\\u53f7\\u51fd\\u6570\\n    function version() public pure returns (string memory) {\\n        return \\\"V2\\\";\\n    }\\n\\n        // \\u521d\\u59cb\\u5316V2\\u7248\\u672c\\u7684\\u989d\\u5916\\u72b6\\u6001\\u53d8\\u91cf\\n    // \\u521d\\u59cb\\u5316V2\\u7248\\u672c\\u7684\\u989d\\u5916\\u72b6\\u6001\\u53d8\\u91cf\\n    // \\u521d\\u59cb\\u5316V2\\u7248\\u672c\\u7684\\u989d\\u5916\\u72b6\\u6001\\u53d8\\u91cf\\n    // \\u4f9b\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\u7684V2\\u521d\\u59cb\\u5316\\u51fd\\u6570\\n    function factoryInitializeV2(address factory) external {\\n        // \\u786e\\u4fdd\\u53ea\\u6709\\u5de5\\u5382\\u5408\\u7ea6\\u53ef\\u4ee5\\u8c03\\u7528\\n        require(msg.sender == factory, \\\"Only factory can call this function\\\");\\n        // \\u786e\\u4fdd\\u8fd9\\u4e2a\\u51fd\\u6570\\u53ea\\u80fd\\u88ab\\u8c03\\u7528\\u4e00\\u6b21\\n        require(minBidIncrementPercentage == 0, \\\"V2 already initialized\\\");\\n        minBidIncrementPercentage = 50; // \\u9ed8\\u8ba45%\\n    }\\n\\n    // \\u4fdd\\u7559\\u539f\\u6709\\u7684onlyOwner\\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u4f9b\\u76f4\\u63a5\\u5347\\u7ea7\\u4f7f\\u7528\\n    function initializeV2() public onlyOwner {\\n        // \\u786e\\u4fdd\\u8fd9\\u4e2a\\u51fd\\u6570\\u53ea\\u80fd\\u88ab\\u8c03\\u7528\\u4e00\\u6b21\\n        require(minBidIncrementPercentage == 0, \\\"V2 already initialized\\\");\\n        minBidIncrementPercentage = 50; // \\u9ed8\\u8ba45%\\n    }\\n\\n    // \\u65b0\\u589e\\u529f\\u80fd\\uff1a\\u8bbe\\u7f6e\\u6700\\u5c0f\\u7ade\\u62cd\\u589e\\u91cf\\n    uint256 public minBidIncrementPercentage; // \\u9ed8\\u8ba45%\\n\\n    function setMinBidIncrementPercentage(uint256 _minBidIncrementPercentage) external onlyOwner {\\n        require(_minBidIncrementPercentage <= 1000, \\\"Increment too high\\\"); // \\u6700\\u592710%\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\n    }\\n\\n    // \\u91cd\\u5199\\u7ade\\u62cd\\u51fd\\u6570\\uff0c\\u6dfb\\u52a0\\u6700\\u5c0f\\u7ade\\u62cd\\u589e\\u91cf\\u68c0\\u67e5\\n    function placeBid(uint256 auctionId) external payable override {\\n        AuctionInfo storage auction = auctions[auctionId];\\n        require(auction.status == AuctionStatus.Active, \\\"Auction not active\\\");\\n        require(block.timestamp < auction.endTime, \\\"Auction ended\\\");\\n\\n        uint256 bidAmount;\\n        if (auction.paymentToken == address(0)) {\\n            // ETH\\u51fa\\u4ef7\\n            bidAmount = msg.value;\\n        } else {\\n            // ERC20\\u4ee3\\u5e01\\u51fa\\u4ef7\\n            require(msg.value == 0, \\\"Cannot send ETH for ERC20 auction\\\");\\n            bidAmount = IERC20(auction.paymentToken).allowance(msg.sender, address(this));\\n        }\\n\\n        require(bidAmount > auction.currentPrice, \\\"Bid too low\\\");\\n\\n        // \\u68c0\\u67e5\\u6700\\u5c0f\\u7ade\\u62cd\\u589e\\u91cf\\n        uint256 minIncrement = (auction.currentPrice * minBidIncrementPercentage) / 10000;\\n        require(bidAmount >= auction.currentPrice + minIncrement, \\\"Bid increment too low\\\");\\n\\n        // \\u9000\\u8fd8\\u4e4b\\u524d\\u7ade\\u62cd\\u8005\\u7684\\u8d44\\u91d1\\n        if (auction.currentWinner != address(0)) {\\n            if (auction.paymentToken == address(0)) {\\n                //  ETH\\u652f\\u4ed8\\n                payable(auction.currentWinner).transfer(auction.currentPrice);\\n            } else {\\n                // ERC20\\u652f\\u4ed8\\n                IERC20(auction.paymentToken).transfer(auction.currentWinner, auction.currentPrice);\\n            }\\n        }\\n\\n        // \\u66f4\\u65b0\\u7ade\\u62cd\\u4fe1\\u606f\\n        auction.currentPrice = bidAmount;\\n        auction.currentWinner = msg.sender;\\n\\n        // \\u8f6c\\u79fb\\u8d44\\u91d1\\u5230\\u5408\\u7ea6\\n        if (auction.paymentToken != address(0)) {\\n            // ERC20\\u652f\\u4ed8\\n            IERC20(auction.paymentToken).transferFrom(msg.sender, address(this), bidAmount);\\n        }\\n\\n        emit BidPlaced(auctionId, msg.sender, bidAmount);\\n    }\\n}\\n\\n// \\u6ce8\\u610f\\uff1aAuctionV2\\u5408\\u7ea6\\u7ee7\\u627f\\u81eaAuction\\uff0c\\u9700\\u8981\\u5728\\u90e8\\u7f72\\u65f6\\u63d0\\u4f9binitialOwner\\u53c2\\u6570\\n// \\u5bf9\\u4e8eUUPS\\u5347\\u7ea7\\uff0c\\u901a\\u5e38\\u901a\\u8fc7\\u4ee3\\u7406\\u5408\\u7ea6\\u8c03\\u7528initialize\\u51fd\\u6570\\u6765\\u521d\\u59cb\\u5316\\uff0c\\u800c\\u4e0d\\u662f\\u76f4\\u63a5\\u8c03\\u7528\\u6784\\u9020\\u51fd\\u6570\",\"keccak256\":\"0xe24a34a0fc40ecd892f5e390ced2efcdd036c197fcb1df8acb9c16979348f10c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015604257600080fd5b5060805161441c61006c600039600081816126f10152818161274601526128f6015261441c6000f3fe6080604052600436106101c65760003560e01c80638375bb39116100f7578063b296024d11610095578063c45a015511610064578063c45a015514610612578063cb4e162b1461063d578063f2fde38b14610668578063fc52848214610691576101cd565b8063b296024d14610556578063b9a2de3a14610581578063bf654aac146105aa578063bf9fe138146105d5576101cd565b80639979ef45116100d15780639979ef45146104a957806399a5d747146104c5578063ad3cb1cc14610502578063b0b211da1461052d576101cd565b80638375bb391461042a5780638da5cb5b1461045557806396b5a75514610480576101cd565b8063571a26a011610164578063674417ae1161013e578063674417ae146103845780636c803886146103ad5780637089f2bf146103d6578063715018a614610413576101cd565b8063571a26a0146102ea5780635cd8a76b14610330578063628a9c9614610347576101cd565b80634f1ccb7a116101a05780634f1ccb7a1461024f5780634f1ef2861461027857806352d1902d1461029457806354fd4d50146102bf576101cd565b806318aee51b146101d25780633659cfe6146101fb57806342f6fb2914610224576101cd565b366101cd57005b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612fe9565b6106bc565b005b34801561020757600080fd5b50610222600480360381019061021d9190612fe9565b61082d565b005b34801561023057600080fd5b5061023961089d565b6040516102469190613075565b60405180910390f35b34801561025b57600080fd5b5061027660048036038101906102719190612fe9565b6108c3565b005b610292600480360381019061028d91906131d6565b610981565b005b3480156102a057600080fd5b506102a96109a0565b6040516102b6919061324b565b60405180910390f35b3480156102cb57600080fd5b506102d46109d3565b6040516102e191906132e5565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c919061333d565b610a10565b6040516103279a999897969594939291906133ff565b60405180910390f35b34801561033c57600080fd5b50610345610af1565b005b34801561035357600080fd5b5061036e60048036038101906103699190612fe9565b610b48565b60405161037b9190613075565b60405180910390f35b34801561039057600080fd5b506103ab60048036038101906103a6919061349b565b610b7b565b005b3480156103b957600080fd5b506103d460048036038101906103cf919061333d565b610c05565b005b3480156103e257600080fd5b506103fd60048036038101906103f891906134db565b610c5c565b60405161040a919061351b565b60405180910390f35b34801561041f57600080fd5b50610428610ebd565b005b34801561043657600080fd5b5061043f610ed1565b60405161044c919061351b565b60405180910390f35b34801561046157600080fd5b5061046a610ed7565b6040516104779190613536565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a2919061333d565b610f0f565b005b6104c360048036038101906104be919061333d565b611120565b005b3480156104d157600080fd5b506104ec60048036038101906104e7919061333d565b611786565b6040516104f9919061351b565b60405180910390f35b34801561050e57600080fd5b5061051761181c565b60405161052491906132e5565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f9190613551565b611855565b005b34801561056257600080fd5b5061056b611e13565b604051610578919061351b565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a3919061333d565b611e19565b005b3480156105b657600080fd5b506105bf6122db565b6040516105cc919061351b565b60405180910390f35b3480156105e157600080fd5b506105fc60048036038101906105f791906135cc565b6122e1565b604051610609919061351b565b60405180910390f35b34801561061e57600080fd5b5061062761251c565b6040516106349190613536565b60405180910390f35b34801561064957600080fd5b50610652612542565b60405161065f919061351b565b60405180910390f35b34801561067457600080fd5b5061068f600480360381019061068a9190612fe9565b612548565b005b34801561069d57600080fd5b506106a66125ce565b6040516106b3919061351b565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610743906136cb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b29061375d565b60405180910390fd5b6107c4816125d4565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558073ffffffffffffffffffffffffffffffffffffffff167f882a7faf45b8f5f760d29fc1bffccf8b38ffb43296a8e7465741024691c0b8f560405160405180910390a250565b6108356126ef565b61083e816125d4565b6108578160405180602001604052806000815250610981565b8073ffffffffffffffffffffffffffffffffffffffff167f882a7faf45b8f5f760d29fc1bffccf8b38ffb43296a8e7465741024691c0b8f560405160405180910390a250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610931576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610928906136cb565b60405180910390fd5b600060085414610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d906137c9565b60405180910390fd5b603260088190555050565b6109896126ef565b610992826125d4565b61099c82826127d5565b5050565b60006109aa6128f4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60606040518060400160405280600281526020017f5632000000000000000000000000000000000000000000000000000000000000815250905090565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080160149054906101000a900460ff1690508a565b610af961297b565b600060085414610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b35906137c9565b60405180910390fd5b6032600881905550565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b8361297b565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610c0d61297b565b6103e8811115610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4990613835565b60405180910390fd5b8060088190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d4d576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2491906138e2565b5050509150506305f5e1008184610d3b919061398c565b610d4591906139fd565b915050610eb7565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790613a7a565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9191906138e2565b5050509150506305f5e1008185610ea8919061398c565b610eb291906139fd565b925050505b92915050565b610ec561297b565b610ecf6000612a02565b565b60055481565b600080610ee2612ad9565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fae90613ae6565b60405180910390fd5b60006002811115610fcb57610fca613388565b5b8160080160149054906101000a900460ff166002811115610fef57610fee613388565b5b1461102f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102690613b52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b990613bbe565b60405180910390fd5b60028160080160146101000a81548160ff021916908360028111156110ea576110e9613388565b5b0217905550817f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df60405160405180910390a25050565b600080600083815260200190815260200160002090506000600281111561114a57611149613388565b5b8160080160149054906101000a900460ff16600281111561116e5761116d613388565b5b146111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590613b52565b60405180910390fd5b806004015442106111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90613c2a565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112555734905061133b565b60003414611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128f90613cbc565b60405180910390fd5b8160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016112f7929190613cdc565b602060405180830381865afa158015611314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113389190613d05565b90505b81600601548111611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137890613d7e565b60405180910390fd5b60006127106008548460060154611398919061398c565b6113a291906139fd565b90508083600601546113b49190613d9e565b8210156113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed90613e1e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115e757600073ffffffffffffffffffffffffffffffffffffffff168360080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361151a578260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc84600601549081150290604051600060405180830381858888f19350505050158015611514573d6000803e3d6000fd5b506115e6565b8260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600601546040518363ffffffff1660e01b81526004016115a1929190613e3e565b6020604051808303816000875af11580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e49190613e9f565b505b5b818360060181905550338360070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168360080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611731578260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016116ec93929190613ecc565b6020604051808303816000875af115801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190613e9f565b505b3373ffffffffffffffffffffffffffffffffffffffff16847f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c4784604051611778919061351b565b60405180910390a350505050565b600060075482116117b357612710600554836117a2919061398c565b6117ac91906139fd565b9050611817565b6000600754836117c39190613f03565b90506000612710600654836117d8919061398c565b6117e291906139fd565b905060006127106005546007546117f9919061398c565b61180391906139fd565b905081816118119190613d9e565b93505050505b919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016118a5919061351b565b602060405180830381865afa1580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e69190613f4c565b73ffffffffffffffffffffffffffffffffffffffff161461193c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193390613fc5565b60405180910390fd5b6000831161197f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197690614057565b60405180910390fd5b600082116119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b9906140c3565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b81526004016119fd929190613cdc565b602060405180830381865afa158015611a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3e9190613e9f565b80611aed57503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1663081812fc866040518263ffffffff1660e01b8152600401611a94919061351b565b602060405180830381865afa158015611ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad59190613f4c565b73ffffffffffffffffffffffffffffffffffffffff16145b611b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b239061412f565b60405180910390fd5b600060016000815480929190611b419061414f565b919050559050600042905060008482611b5a9190613d9e565b90506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001838152602001828152602001878152602001878152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115611c0b57611c0a613388565b5b81525060008085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101208201518160080160146101000a81548160ff02191690836002811115611d9b57611d9a613388565b5b02179055509050508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16847f8777bed2a899ba8843de663a1f6ed1c48d071cc8bde08e2488b59c00c1993f768a604051611e01919061351b565b60405180910390a45050505050505050565b60085481565b6000806000838152602001908152602001600020905060006002811115611e4357611e42613388565b5b8160080160149054906101000a900460ff166002811115611e6757611e66613388565b5b14611ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9e90613b52565b60405180910390fd5b8060040154421015611eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee5906141e3565b60405180910390fd5b60018160080160146101000a81548160ff02191690836002811115611f1657611f15613388565b5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612285576000611f828260060154611786565b90506000818360060154611f969190613f03565b90508260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600201546040518463ffffffff1660e01b815260040161204593929190613ecc565b600060405180830381600087803b15801561205f57600080fd5b505af1158015612073573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168360080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361213f578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612139573d6000803e3d6000fd5b50612207565b8260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016121c2929190613e3e565b6020604051808303816000875af11580156121e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122059190613e9f565b505b8260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea5018560060154604051612276919061351b565b60405180910390a350506122d7565b600073ffffffffffffffffffffffffffffffffffffffff16827fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea50160006040516122ce919061423e565b60405180910390a35b5050565b60065481565b6000806122ec612b01565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561233a5750825b9050600060018367ffffffffffffffff1614801561236f575060003073ffffffffffffffffffffffffffffffffffffffff163b145b90508115801561237d575080155b156123b4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156124045760018560000160086101000a81548160ff0219169083151502179055505b61240d88612b15565b8b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a6005819055508960068190555088600781905550600060018190555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005549550831561250d5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161250491906142a8565b60405180910390a15b50505050509695505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61255061297b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125c25760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125b99190613536565b60405180910390fd5b6125cb81612a02565b50565b60015481565b3073ffffffffffffffffffffffffffffffffffffffff166125f3612b29565b73ffffffffffffffffffffffffffffffffffffffff16148061264e5750612618610ed7565b73ffffffffffffffffffffffffffffffffffffffff16612636612b29565b73ffffffffffffffffffffffffffffffffffffffff16145b806126ad5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612695612b29565b73ffffffffffffffffffffffffffffffffffffffff16145b6126ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e39061430f565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061279c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612783612b31565b73ffffffffffffffffffffffffffffffffffffffff1614155b156127d3576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561283d57506040513d601f19601f8201168201806040525081019061283a919061435b565b60015b61287e57816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016128759190613536565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146128e557806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016128dc919061324b565b60405180910390fd5b6128ef8383612b88565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612979576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612983612b29565b73ffffffffffffffffffffffffffffffffffffffff166129a1610ed7565b73ffffffffffffffffffffffffffffffffffffffff1614612a00576129c4612b29565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016129f79190613536565b60405180910390fd5b565b6000612a0c612ad9565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600080612b0c612bfb565b90508091505090565b612b1d612c26565b612b2681612c66565b50565b600033905090565b6000612b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612cec565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612b9182612cf6565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115612bee57612be88282612dc3565b50612bf7565b612bf6612e47565b5b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b612c2e612e84565b612c64576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612c6e612c26565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ce05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612cd79190613536565b60405180910390fd5b612ce981612a02565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612d5257806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612d499190613536565b60405180910390fd5b80612d7f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612cec565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612ded91906143cf565b600060405180830381855af49150503d8060008114612e28576040519150601f19603f3d011682016040523d82523d6000602084013e612e2d565b606091505b5091509150612e3d858383612ea4565b9250505092915050565b6000341115612e82576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612e8e612b01565b60000160089054906101000a900460ff16905090565b606082612eb957612eb482612f33565b612f2b565b60008251148015612ee1575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15612f2357836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612f1a9190613536565b60405180910390fd5b819050612f2c565b5b9392505050565b600081511115612f4557805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fb682612f8b565b9050919050565b612fc681612fab565b8114612fd157600080fd5b50565b600081359050612fe381612fbd565b92915050565b600060208284031215612fff57612ffe612f81565b5b600061300d84828501612fd4565b91505092915050565b6000819050919050565b600061303b61303661303184612f8b565b613016565b612f8b565b9050919050565b600061304d82613020565b9050919050565b600061305f82613042565b9050919050565b61306f81613054565b82525050565b600060208201905061308a6000830184613066565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130e38261309a565b810181811067ffffffffffffffff82111715613102576131016130ab565b5b80604052505050565b6000613115612f77565b905061312182826130da565b919050565b600067ffffffffffffffff821115613141576131406130ab565b5b61314a8261309a565b9050602081019050919050565b82818337600083830152505050565b600061317961317484613126565b61310b565b90508281526020810184848401111561319557613194613095565b5b6131a0848285613157565b509392505050565b600082601f8301126131bd576131bc613090565b5b81356131cd848260208601613166565b91505092915050565b600080604083850312156131ed576131ec612f81565b5b60006131fb85828601612fd4565b925050602083013567ffffffffffffffff81111561321c5761321b612f86565b5b613228858286016131a8565b9150509250929050565b6000819050919050565b61324581613232565b82525050565b6000602082019050613260600083018461323c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132a0578082015181840152602081019050613285565b60008484015250505050565b60006132b782613266565b6132c18185613271565b93506132d1818560208601613282565b6132da8161309a565b840191505092915050565b600060208201905081810360008301526132ff81846132ac565b905092915050565b6000819050919050565b61331a81613307565b811461332557600080fd5b50565b60008135905061333781613311565b92915050565b60006020828403121561335357613352612f81565b5b600061336184828501613328565b91505092915050565b61337381612fab565b82525050565b61338281613307565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106133c8576133c7613388565b5b50565b60008190506133d9826133b7565b919050565b60006133e9826133cb565b9050919050565b6133f9816133de565b82525050565b600061014082019050613415600083018d61336a565b613422602083018c61336a565b61342f604083018b613379565b61343c606083018a613379565b6134496080830189613379565b61345660a0830188613379565b61346360c0830187613379565b61347060e083018661336a565b61347e61010083018561336a565b61348c6101208301846133f0565b9b9a5050505050505050505050565b600080604083850312156134b2576134b1612f81565b5b60006134c085828601612fd4565b92505060206134d185828601612fd4565b9150509250929050565b600080604083850312156134f2576134f1612f81565b5b600061350085828601612fd4565b925050602061351185828601613328565b9150509250929050565b60006020820190506135306000830184613379565b92915050565b600060208201905061354b600083018461336a565b92915050565b600080600080600060a0868803121561356d5761356c612f81565b5b600061357b88828901612fd4565b955050602061358c88828901613328565b945050604061359d88828901613328565b93505060606135ae88828901613328565b92505060806135bf88828901612fd4565b9150509295509295909350565b60008060008060008060c087890312156135e9576135e8612f81565b5b60006135f789828a01612fd4565b965050602061360889828a01613328565b955050604061361989828a01613328565b945050606061362a89828a01613328565b935050608061363b89828a01612fd4565b92505060a061364c89828a01612fd4565b9150509295509295509295565b7f4f6e6c7920666163746f72792063616e2063616c6c20746869732066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b60006136b5602383613271565b91506136c082613659565b604082019050919050565b600060208201905081810360008301526136e4816136a8565b9050919050565b7f4e657720696d706c656d656e746174696f6e2063616e6e6f74206265207a657260008201527f6f20616464726573730000000000000000000000000000000000000000000000602082015250565b6000613747602983613271565b9150613752826136eb565b604082019050919050565b600060208201905081810360008301526137768161373a565b9050919050565b7f563220616c726561647920696e697469616c697a656400000000000000000000600082015250565b60006137b3601683613271565b91506137be8261377d565b602082019050919050565b600060208201905081810360008301526137e2816137a6565b9050919050565b7f496e6372656d656e7420746f6f20686967680000000000000000000000000000600082015250565b600061381f601283613271565b915061382a826137e9565b602082019050919050565b6000602082019050818103600083015261384e81613812565b9050919050565b600069ffffffffffffffffffff82169050919050565b61387481613855565b811461387f57600080fd5b50565b6000815190506138918161386b565b92915050565b6000819050919050565b6138aa81613897565b81146138b557600080fd5b50565b6000815190506138c7816138a1565b92915050565b6000815190506138dc81613311565b92915050565b600080600080600060a086880312156138fe576138fd612f81565b5b600061390c88828901613882565b955050602061391d888289016138b8565b945050604061392e888289016138cd565b935050606061393f888289016138cd565b925050608061395088828901613882565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061399782613307565b91506139a283613307565b92508282026139b081613307565b915082820484148315176139c7576139c661395d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a0882613307565b9150613a1383613307565b925082613a2357613a226139ce565b5b828204905092915050565b7f4e6f207072696365206665656420666f7220746f6b656e000000000000000000600082015250565b6000613a64601783613271565b9150613a6f82613a2e565b602082019050919050565b60006020820190508181036000830152613a9381613a57565b9050919050565b7f4f6e6c792073656c6c65722063616e2063616e63656c00000000000000000000600082015250565b6000613ad0601683613271565b9150613adb82613a9a565b602082019050919050565b60006020820190508181036000830152613aff81613ac3565b9050919050565b7f41756374696f6e206e6f74206163746976650000000000000000000000000000600082015250565b6000613b3c601283613271565b9150613b4782613b06565b602082019050919050565b60006020820190508181036000830152613b6b81613b2f565b9050919050565b7f43616e6e6f742063616e63656c20616674657220626964730000000000000000600082015250565b6000613ba8601883613271565b9150613bb382613b72565b602082019050919050565b60006020820190508181036000830152613bd781613b9b565b9050919050565b7f41756374696f6e20656e64656400000000000000000000000000000000000000600082015250565b6000613c14600d83613271565b9150613c1f82613bde565b602082019050919050565b60006020820190508181036000830152613c4381613c07565b9050919050565b7f43616e6e6f742073656e642045544820666f722045524332302061756374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000613ca6602183613271565b9150613cb182613c4a565b604082019050919050565b60006020820190508181036000830152613cd581613c99565b9050919050565b6000604082019050613cf1600083018561336a565b613cfe602083018461336a565b9392505050565b600060208284031215613d1b57613d1a612f81565b5b6000613d29848285016138cd565b91505092915050565b7f42696420746f6f206c6f77000000000000000000000000000000000000000000600082015250565b6000613d68600b83613271565b9150613d7382613d32565b602082019050919050565b60006020820190508181036000830152613d9781613d5b565b9050919050565b6000613da982613307565b9150613db483613307565b9250828201905080821115613dcc57613dcb61395d565b5b92915050565b7f42696420696e6372656d656e7420746f6f206c6f770000000000000000000000600082015250565b6000613e08601583613271565b9150613e1382613dd2565b602082019050919050565b60006020820190508181036000830152613e3781613dfb565b9050919050565b6000604082019050613e53600083018561336a565b613e606020830184613379565b9392505050565b60008115159050919050565b613e7c81613e67565b8114613e8757600080fd5b50565b600081519050613e9981613e73565b92915050565b600060208284031215613eb557613eb4612f81565b5b6000613ec384828501613e8a565b91505092915050565b6000606082019050613ee1600083018661336a565b613eee602083018561336a565b613efb6040830184613379565b949350505050565b6000613f0e82613307565b9150613f1983613307565b9250828203905081811115613f3157613f3061395d565b5b92915050565b600081519050613f4681612fbd565b92915050565b600060208284031215613f6257613f61612f81565b5b6000613f7084828501613f37565b91505092915050565b7f4e6f74206f776e6572206f66204e465400000000000000000000000000000000600082015250565b6000613faf601083613271565b9150613fba82613f79565b602082019050919050565b60006020820190508181036000830152613fde81613fa2565b9050919050565b7f5374617274696e67207072696365206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b6000614041602583613271565b915061404c82613fe5565b604082019050919050565b6000602082019050818103600083015261407081614034565b9050919050565b7f4475726174696f6e206d7573742062652067726561746572207468616e203000600082015250565b60006140ad601f83613271565b91506140b882614077565b602082019050919050565b600060208201905081810360008301526140dc816140a0565b9050919050565b7f4e4654206e6f7420617070726f76656400000000000000000000000000000000600082015250565b6000614119601083613271565b9150614124826140e3565b602082019050919050565b600060208201905081810360008301526141488161410c565b9050919050565b600061415a82613307565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361418c5761418b61395d565b5b600182019050919050565b7f41756374696f6e206e6f7420656e646564207965740000000000000000000000600082015250565b60006141cd601583613271565b91506141d882614197565b602082019050919050565b600060208201905081810360008301526141fc816141c0565b9050919050565b6000819050919050565b600061422861422361421e84614203565b613016565b613307565b9050919050565b6142388161420d565b82525050565b6000602082019050614253600083018461422f565b92915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061429261428d61428884614259565b613016565b614263565b9050919050565b6142a281614277565b82525050565b60006020820190506142bd6000830184614299565b92915050565b7f55555053556e617574686f72697a656443616c6c436f6e746578740000000000600082015250565b60006142f9601b83613271565b9150614304826142c3565b602082019050919050565b60006020820190508181036000830152614328816142ec565b9050919050565b61433881613232565b811461434357600080fd5b50565b6000815190506143558161432f565b92915050565b60006020828403121561437157614370612f81565b5b600061437f84828501614346565b91505092915050565b600081519050919050565b600081905092915050565b60006143a982614388565b6143b38185614393565b93506143c3818560208601613282565b80840191505092915050565b60006143db828461439e565b91508190509291505056fea264697066735822122028e0cdf69428c161a6580a785961279e36a8ee792ed5b98551be1640b0e9114364736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c80638375bb39116100f7578063b296024d11610095578063c45a015511610064578063c45a015514610612578063cb4e162b1461063d578063f2fde38b14610668578063fc52848214610691576101cd565b8063b296024d14610556578063b9a2de3a14610581578063bf654aac146105aa578063bf9fe138146105d5576101cd565b80639979ef45116100d15780639979ef45146104a957806399a5d747146104c5578063ad3cb1cc14610502578063b0b211da1461052d576101cd565b80638375bb391461042a5780638da5cb5b1461045557806396b5a75514610480576101cd565b8063571a26a011610164578063674417ae1161013e578063674417ae146103845780636c803886146103ad5780637089f2bf146103d6578063715018a614610413576101cd565b8063571a26a0146102ea5780635cd8a76b14610330578063628a9c9614610347576101cd565b80634f1ccb7a116101a05780634f1ccb7a1461024f5780634f1ef2861461027857806352d1902d1461029457806354fd4d50146102bf576101cd565b806318aee51b146101d25780633659cfe6146101fb57806342f6fb2914610224576101cd565b366101cd57005b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612fe9565b6106bc565b005b34801561020757600080fd5b50610222600480360381019061021d9190612fe9565b61082d565b005b34801561023057600080fd5b5061023961089d565b6040516102469190613075565b60405180910390f35b34801561025b57600080fd5b5061027660048036038101906102719190612fe9565b6108c3565b005b610292600480360381019061028d91906131d6565b610981565b005b3480156102a057600080fd5b506102a96109a0565b6040516102b6919061324b565b60405180910390f35b3480156102cb57600080fd5b506102d46109d3565b6040516102e191906132e5565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c919061333d565b610a10565b6040516103279a999897969594939291906133ff565b60405180910390f35b34801561033c57600080fd5b50610345610af1565b005b34801561035357600080fd5b5061036e60048036038101906103699190612fe9565b610b48565b60405161037b9190613075565b60405180910390f35b34801561039057600080fd5b506103ab60048036038101906103a6919061349b565b610b7b565b005b3480156103b957600080fd5b506103d460048036038101906103cf919061333d565b610c05565b005b3480156103e257600080fd5b506103fd60048036038101906103f891906134db565b610c5c565b60405161040a919061351b565b60405180910390f35b34801561041f57600080fd5b50610428610ebd565b005b34801561043657600080fd5b5061043f610ed1565b60405161044c919061351b565b60405180910390f35b34801561046157600080fd5b5061046a610ed7565b6040516104779190613536565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a2919061333d565b610f0f565b005b6104c360048036038101906104be919061333d565b611120565b005b3480156104d157600080fd5b506104ec60048036038101906104e7919061333d565b611786565b6040516104f9919061351b565b60405180910390f35b34801561050e57600080fd5b5061051761181c565b60405161052491906132e5565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f9190613551565b611855565b005b34801561056257600080fd5b5061056b611e13565b604051610578919061351b565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a3919061333d565b611e19565b005b3480156105b657600080fd5b506105bf6122db565b6040516105cc919061351b565b60405180910390f35b3480156105e157600080fd5b506105fc60048036038101906105f791906135cc565b6122e1565b604051610609919061351b565b60405180910390f35b34801561061e57600080fd5b5061062761251c565b6040516106349190613536565b60405180910390f35b34801561064957600080fd5b50610652612542565b60405161065f919061351b565b60405180910390f35b34801561067457600080fd5b5061068f600480360381019061068a9190612fe9565b612548565b005b34801561069d57600080fd5b506106a66125ce565b6040516106b3919061351b565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610743906136cb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b29061375d565b60405180910390fd5b6107c4816125d4565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558073ffffffffffffffffffffffffffffffffffffffff167f882a7faf45b8f5f760d29fc1bffccf8b38ffb43296a8e7465741024691c0b8f560405160405180910390a250565b6108356126ef565b61083e816125d4565b6108578160405180602001604052806000815250610981565b8073ffffffffffffffffffffffffffffffffffffffff167f882a7faf45b8f5f760d29fc1bffccf8b38ffb43296a8e7465741024691c0b8f560405160405180910390a250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610931576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610928906136cb565b60405180910390fd5b600060085414610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d906137c9565b60405180910390fd5b603260088190555050565b6109896126ef565b610992826125d4565b61099c82826127d5565b5050565b60006109aa6128f4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60606040518060400160405280600281526020017f5632000000000000000000000000000000000000000000000000000000000000815250905090565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080160149054906101000a900460ff1690508a565b610af961297b565b600060085414610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b35906137c9565b60405180910390fd5b6032600881905550565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b8361297b565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610c0d61297b565b6103e8811115610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4990613835565b60405180910390fd5b8060088190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d4d576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2491906138e2565b5050509150506305f5e1008184610d3b919061398c565b610d4591906139fd565b915050610eb7565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790613a7a565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9191906138e2565b5050509150506305f5e1008185610ea8919061398c565b610eb291906139fd565b925050505b92915050565b610ec561297b565b610ecf6000612a02565b565b60055481565b600080610ee2612ad9565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fae90613ae6565b60405180910390fd5b60006002811115610fcb57610fca613388565b5b8160080160149054906101000a900460ff166002811115610fef57610fee613388565b5b1461102f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102690613b52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b990613bbe565b60405180910390fd5b60028160080160146101000a81548160ff021916908360028111156110ea576110e9613388565b5b0217905550817f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df60405160405180910390a25050565b600080600083815260200190815260200160002090506000600281111561114a57611149613388565b5b8160080160149054906101000a900460ff16600281111561116e5761116d613388565b5b146111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590613b52565b60405180910390fd5b806004015442106111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90613c2a565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112555734905061133b565b60003414611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128f90613cbc565b60405180910390fd5b8160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016112f7929190613cdc565b602060405180830381865afa158015611314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113389190613d05565b90505b81600601548111611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137890613d7e565b60405180910390fd5b60006127106008548460060154611398919061398c565b6113a291906139fd565b90508083600601546113b49190613d9e565b8210156113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed90613e1e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115e757600073ffffffffffffffffffffffffffffffffffffffff168360080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361151a578260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc84600601549081150290604051600060405180830381858888f19350505050158015611514573d6000803e3d6000fd5b506115e6565b8260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600601546040518363ffffffff1660e01b81526004016115a1929190613e3e565b6020604051808303816000875af11580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e49190613e9f565b505b5b818360060181905550338360070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168360080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611731578260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016116ec93929190613ecc565b6020604051808303816000875af115801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190613e9f565b505b3373ffffffffffffffffffffffffffffffffffffffff16847f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c4784604051611778919061351b565b60405180910390a350505050565b600060075482116117b357612710600554836117a2919061398c565b6117ac91906139fd565b9050611817565b6000600754836117c39190613f03565b90506000612710600654836117d8919061398c565b6117e291906139fd565b905060006127106005546007546117f9919061398c565b61180391906139fd565b905081816118119190613d9e565b93505050505b919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016118a5919061351b565b602060405180830381865afa1580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e69190613f4c565b73ffffffffffffffffffffffffffffffffffffffff161461193c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193390613fc5565b60405180910390fd5b6000831161197f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197690614057565b60405180910390fd5b600082116119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b9906140c3565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b81526004016119fd929190613cdc565b602060405180830381865afa158015611a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3e9190613e9f565b80611aed57503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1663081812fc866040518263ffffffff1660e01b8152600401611a94919061351b565b602060405180830381865afa158015611ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad59190613f4c565b73ffffffffffffffffffffffffffffffffffffffff16145b611b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b239061412f565b60405180910390fd5b600060016000815480929190611b419061414f565b919050559050600042905060008482611b5a9190613d9e565b90506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001838152602001828152602001878152602001878152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115611c0b57611c0a613388565b5b81525060008085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101208201518160080160146101000a81548160ff02191690836002811115611d9b57611d9a613388565b5b02179055509050508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16847f8777bed2a899ba8843de663a1f6ed1c48d071cc8bde08e2488b59c00c1993f768a604051611e01919061351b565b60405180910390a45050505050505050565b60085481565b6000806000838152602001908152602001600020905060006002811115611e4357611e42613388565b5b8160080160149054906101000a900460ff166002811115611e6757611e66613388565b5b14611ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9e90613b52565b60405180910390fd5b8060040154421015611eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee5906141e3565b60405180910390fd5b60018160080160146101000a81548160ff02191690836002811115611f1657611f15613388565b5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612285576000611f828260060154611786565b90506000818360060154611f969190613f03565b90508260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600201546040518463ffffffff1660e01b815260040161204593929190613ecc565b600060405180830381600087803b15801561205f57600080fd5b505af1158015612073573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168360080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361213f578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612139573d6000803e3d6000fd5b50612207565b8260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016121c2929190613e3e565b6020604051808303816000875af11580156121e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122059190613e9f565b505b8260070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea5018560060154604051612276919061351b565b60405180910390a350506122d7565b600073ffffffffffffffffffffffffffffffffffffffff16827fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea50160006040516122ce919061423e565b60405180910390a35b5050565b60065481565b6000806122ec612b01565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561233a5750825b9050600060018367ffffffffffffffff1614801561236f575060003073ffffffffffffffffffffffffffffffffffffffff163b145b90508115801561237d575080155b156123b4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156124045760018560000160086101000a81548160ff0219169083151502179055505b61240d88612b15565b8b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a6005819055508960068190555088600781905550600060018190555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005549550831561250d5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161250491906142a8565b60405180910390a15b50505050509695505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61255061297b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125c25760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125b99190613536565b60405180910390fd5b6125cb81612a02565b50565b60015481565b3073ffffffffffffffffffffffffffffffffffffffff166125f3612b29565b73ffffffffffffffffffffffffffffffffffffffff16148061264e5750612618610ed7565b73ffffffffffffffffffffffffffffffffffffffff16612636612b29565b73ffffffffffffffffffffffffffffffffffffffff16145b806126ad5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612695612b29565b73ffffffffffffffffffffffffffffffffffffffff16145b6126ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e39061430f565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061279c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612783612b31565b73ffffffffffffffffffffffffffffffffffffffff1614155b156127d3576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561283d57506040513d601f19601f8201168201806040525081019061283a919061435b565b60015b61287e57816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016128759190613536565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146128e557806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016128dc919061324b565b60405180910390fd5b6128ef8383612b88565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612979576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612983612b29565b73ffffffffffffffffffffffffffffffffffffffff166129a1610ed7565b73ffffffffffffffffffffffffffffffffffffffff1614612a00576129c4612b29565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016129f79190613536565b60405180910390fd5b565b6000612a0c612ad9565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600080612b0c612bfb565b90508091505090565b612b1d612c26565b612b2681612c66565b50565b600033905090565b6000612b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612cec565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612b9182612cf6565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115612bee57612be88282612dc3565b50612bf7565b612bf6612e47565b5b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b612c2e612e84565b612c64576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612c6e612c26565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ce05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612cd79190613536565b60405180910390fd5b612ce981612a02565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612d5257806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612d499190613536565b60405180910390fd5b80612d7f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612cec565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612ded91906143cf565b600060405180830381855af49150503d8060008114612e28576040519150601f19603f3d011682016040523d82523d6000602084013e612e2d565b606091505b5091509150612e3d858383612ea4565b9250505092915050565b6000341115612e82576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612e8e612b01565b60000160089054906101000a900460ff16905090565b606082612eb957612eb482612f33565b612f2b565b60008251148015612ee1575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15612f2357836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612f1a9190613536565b60405180910390fd5b819050612f2c565b5b9392505050565b600081511115612f4557805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fb682612f8b565b9050919050565b612fc681612fab565b8114612fd157600080fd5b50565b600081359050612fe381612fbd565b92915050565b600060208284031215612fff57612ffe612f81565b5b600061300d84828501612fd4565b91505092915050565b6000819050919050565b600061303b61303661303184612f8b565b613016565b612f8b565b9050919050565b600061304d82613020565b9050919050565b600061305f82613042565b9050919050565b61306f81613054565b82525050565b600060208201905061308a6000830184613066565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130e38261309a565b810181811067ffffffffffffffff82111715613102576131016130ab565b5b80604052505050565b6000613115612f77565b905061312182826130da565b919050565b600067ffffffffffffffff821115613141576131406130ab565b5b61314a8261309a565b9050602081019050919050565b82818337600083830152505050565b600061317961317484613126565b61310b565b90508281526020810184848401111561319557613194613095565b5b6131a0848285613157565b509392505050565b600082601f8301126131bd576131bc613090565b5b81356131cd848260208601613166565b91505092915050565b600080604083850312156131ed576131ec612f81565b5b60006131fb85828601612fd4565b925050602083013567ffffffffffffffff81111561321c5761321b612f86565b5b613228858286016131a8565b9150509250929050565b6000819050919050565b61324581613232565b82525050565b6000602082019050613260600083018461323c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132a0578082015181840152602081019050613285565b60008484015250505050565b60006132b782613266565b6132c18185613271565b93506132d1818560208601613282565b6132da8161309a565b840191505092915050565b600060208201905081810360008301526132ff81846132ac565b905092915050565b6000819050919050565b61331a81613307565b811461332557600080fd5b50565b60008135905061333781613311565b92915050565b60006020828403121561335357613352612f81565b5b600061336184828501613328565b91505092915050565b61337381612fab565b82525050565b61338281613307565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106133c8576133c7613388565b5b50565b60008190506133d9826133b7565b919050565b60006133e9826133cb565b9050919050565b6133f9816133de565b82525050565b600061014082019050613415600083018d61336a565b613422602083018c61336a565b61342f604083018b613379565b61343c606083018a613379565b6134496080830189613379565b61345660a0830188613379565b61346360c0830187613379565b61347060e083018661336a565b61347e61010083018561336a565b61348c6101208301846133f0565b9b9a5050505050505050505050565b600080604083850312156134b2576134b1612f81565b5b60006134c085828601612fd4565b92505060206134d185828601612fd4565b9150509250929050565b600080604083850312156134f2576134f1612f81565b5b600061350085828601612fd4565b925050602061351185828601613328565b9150509250929050565b60006020820190506135306000830184613379565b92915050565b600060208201905061354b600083018461336a565b92915050565b600080600080600060a0868803121561356d5761356c612f81565b5b600061357b88828901612fd4565b955050602061358c88828901613328565b945050604061359d88828901613328565b93505060606135ae88828901613328565b92505060806135bf88828901612fd4565b9150509295509295909350565b60008060008060008060c087890312156135e9576135e8612f81565b5b60006135f789828a01612fd4565b965050602061360889828a01613328565b955050604061361989828a01613328565b945050606061362a89828a01613328565b935050608061363b89828a01612fd4565b92505060a061364c89828a01612fd4565b9150509295509295509295565b7f4f6e6c7920666163746f72792063616e2063616c6c20746869732066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b60006136b5602383613271565b91506136c082613659565b604082019050919050565b600060208201905081810360008301526136e4816136a8565b9050919050565b7f4e657720696d706c656d656e746174696f6e2063616e6e6f74206265207a657260008201527f6f20616464726573730000000000000000000000000000000000000000000000602082015250565b6000613747602983613271565b9150613752826136eb565b604082019050919050565b600060208201905081810360008301526137768161373a565b9050919050565b7f563220616c726561647920696e697469616c697a656400000000000000000000600082015250565b60006137b3601683613271565b91506137be8261377d565b602082019050919050565b600060208201905081810360008301526137e2816137a6565b9050919050565b7f496e6372656d656e7420746f6f20686967680000000000000000000000000000600082015250565b600061381f601283613271565b915061382a826137e9565b602082019050919050565b6000602082019050818103600083015261384e81613812565b9050919050565b600069ffffffffffffffffffff82169050919050565b61387481613855565b811461387f57600080fd5b50565b6000815190506138918161386b565b92915050565b6000819050919050565b6138aa81613897565b81146138b557600080fd5b50565b6000815190506138c7816138a1565b92915050565b6000815190506138dc81613311565b92915050565b600080600080600060a086880312156138fe576138fd612f81565b5b600061390c88828901613882565b955050602061391d888289016138b8565b945050604061392e888289016138cd565b935050606061393f888289016138cd565b925050608061395088828901613882565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061399782613307565b91506139a283613307565b92508282026139b081613307565b915082820484148315176139c7576139c661395d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a0882613307565b9150613a1383613307565b925082613a2357613a226139ce565b5b828204905092915050565b7f4e6f207072696365206665656420666f7220746f6b656e000000000000000000600082015250565b6000613a64601783613271565b9150613a6f82613a2e565b602082019050919050565b60006020820190508181036000830152613a9381613a57565b9050919050565b7f4f6e6c792073656c6c65722063616e2063616e63656c00000000000000000000600082015250565b6000613ad0601683613271565b9150613adb82613a9a565b602082019050919050565b60006020820190508181036000830152613aff81613ac3565b9050919050565b7f41756374696f6e206e6f74206163746976650000000000000000000000000000600082015250565b6000613b3c601283613271565b9150613b4782613b06565b602082019050919050565b60006020820190508181036000830152613b6b81613b2f565b9050919050565b7f43616e6e6f742063616e63656c20616674657220626964730000000000000000600082015250565b6000613ba8601883613271565b9150613bb382613b72565b602082019050919050565b60006020820190508181036000830152613bd781613b9b565b9050919050565b7f41756374696f6e20656e64656400000000000000000000000000000000000000600082015250565b6000613c14600d83613271565b9150613c1f82613bde565b602082019050919050565b60006020820190508181036000830152613c4381613c07565b9050919050565b7f43616e6e6f742073656e642045544820666f722045524332302061756374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000613ca6602183613271565b9150613cb182613c4a565b604082019050919050565b60006020820190508181036000830152613cd581613c99565b9050919050565b6000604082019050613cf1600083018561336a565b613cfe602083018461336a565b9392505050565b600060208284031215613d1b57613d1a612f81565b5b6000613d29848285016138cd565b91505092915050565b7f42696420746f6f206c6f77000000000000000000000000000000000000000000600082015250565b6000613d68600b83613271565b9150613d7382613d32565b602082019050919050565b60006020820190508181036000830152613d9781613d5b565b9050919050565b6000613da982613307565b9150613db483613307565b9250828201905080821115613dcc57613dcb61395d565b5b92915050565b7f42696420696e6372656d656e7420746f6f206c6f770000000000000000000000600082015250565b6000613e08601583613271565b9150613e1382613dd2565b602082019050919050565b60006020820190508181036000830152613e3781613dfb565b9050919050565b6000604082019050613e53600083018561336a565b613e606020830184613379565b9392505050565b60008115159050919050565b613e7c81613e67565b8114613e8757600080fd5b50565b600081519050613e9981613e73565b92915050565b600060208284031215613eb557613eb4612f81565b5b6000613ec384828501613e8a565b91505092915050565b6000606082019050613ee1600083018661336a565b613eee602083018561336a565b613efb6040830184613379565b949350505050565b6000613f0e82613307565b9150613f1983613307565b9250828203905081811115613f3157613f3061395d565b5b92915050565b600081519050613f4681612fbd565b92915050565b600060208284031215613f6257613f61612f81565b5b6000613f7084828501613f37565b91505092915050565b7f4e6f74206f776e6572206f66204e465400000000000000000000000000000000600082015250565b6000613faf601083613271565b9150613fba82613f79565b602082019050919050565b60006020820190508181036000830152613fde81613fa2565b9050919050565b7f5374617274696e67207072696365206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b6000614041602583613271565b915061404c82613fe5565b604082019050919050565b6000602082019050818103600083015261407081614034565b9050919050565b7f4475726174696f6e206d7573742062652067726561746572207468616e203000600082015250565b60006140ad601f83613271565b91506140b882614077565b602082019050919050565b600060208201905081810360008301526140dc816140a0565b9050919050565b7f4e4654206e6f7420617070726f76656400000000000000000000000000000000600082015250565b6000614119601083613271565b9150614124826140e3565b602082019050919050565b600060208201905081810360008301526141488161410c565b9050919050565b600061415a82613307565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361418c5761418b61395d565b5b600182019050919050565b7f41756374696f6e206e6f7420656e646564207965740000000000000000000000600082015250565b60006141cd601583613271565b91506141d882614197565b602082019050919050565b600060208201905081810360008301526141fc816141c0565b9050919050565b6000819050919050565b600061422861422361421e84614203565b613016565b613307565b9050919050565b6142388161420d565b82525050565b6000602082019050614253600083018461422f565b92915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061429261428d61428884614259565b613016565b614263565b9050919050565b6142a281614277565b82525050565b60006020820190506142bd6000830184614299565b92915050565b7f55555053556e617574686f72697a656443616c6c436f6e746578740000000000600082015250565b60006142f9601b83613271565b9150614304826142c3565b602082019050919050565b60006020820190508181036000830152614328816142ec565b9050919050565b61433881613232565b811461434357600080fd5b50565b6000815190506143558161432f565b92915050565b60006020828403121561437157614370612f81565b5b600061437f84828501614346565b91505092915050565b600081519050919050565b600081905092915050565b60006143a982614388565b6143b38185614393565b93506143c3818560208601613282565b80840191505092915050565b60006143db828461439e565b91508190509291505056fea264697066735822122028e0cdf69428c161a6580a785961279e36a8ee792ed5b98551be1640b0e9114364736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1729,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "auctions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(AuctionInfo)1724_storage)"
      },
      {
        "astId": 1731,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "nextAuctionId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1733,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1736,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "ethUsdPriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1741,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "tokenUsdPriceFeeds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)45)"
      },
      {
        "astId": 1743,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "baseFeePercentage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1745,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "maxFeePercentage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1747,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "feeThreshold",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3053,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "minBidIncrementPercentage",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionStatus)1702": {
        "encoding": "inplace",
        "label": "enum Auction.AuctionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_contract(AggregatorV3Interface)45)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)45"
      },
      "t_mapping(t_uint256,t_struct(AuctionInfo)1724_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Auction.AuctionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionInfo)1724_storage"
      },
      "t_struct(AuctionInfo)1724_storage": {
        "encoding": "inplace",
        "label": "struct Auction.AuctionInfo",
        "members": [
          {
            "astId": 1704,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1706,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1708,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "nftId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1710,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1712,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1714,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "startingPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1716,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "currentPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1718,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "currentWinner",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1720,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "paymentToken",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1723,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "status",
            "offset": 20,
            "slot": "8",
            "type": "t_enum(AuctionStatus)1702"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}